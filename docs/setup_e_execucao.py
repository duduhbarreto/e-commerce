# setup_e_execucao.py - Instru√ß√µes para configurar e executar o projeto

"""
========================================================================
SISTEMA DE E-COMMERCE - ATIVIDADE TAC-3 TESTES
Professor: Walter Felipe
========================================================================

ESTRUTURA DO PROJETO:
‚îú‚îÄ‚îÄ ecommerce.py                 # Classes principais do sistema
‚îú‚îÄ‚îÄ test_questao1_pytest.py     # Quest√£o 1: Testes Pytest para Produto  
‚îú‚îÄ‚îÄ test_questao2_unittest.py   # Quest√£o 2: Testes unittest para Carrinho
‚îú‚îÄ‚îÄ test_questao3_testify.py    # Quest√£o 3: Testes para SistemaPagamento
‚îú‚îÄ‚îÄ test_integracao_extras.py   # Quest√µes 4, 5, 7, 10: Testes extras
‚îî‚îÄ‚îÄ requirements.txt            # Depend√™ncias do projeto

INSTALA√á√ÉO E CONFIGURA√á√ÉO:
========================================================================

1. Criar ambiente virtual:
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\Scripts\activate     # Windows

2. Instalar depend√™ncias:
   pip install pytest

3. Criar arquivo requirements.txt:
   pytest>=7.0.0

EXECU√á√ÉO DOS TESTES:
========================================================================

# Executar todos os testes com pytest:
pytest -v

# Executar quest√£o espec√≠fica:
pytest test_questao1_pytest.py -v
pytest test_questao2_unittest.py -v  
pytest test_questao3_testify.py -v

# Executar testes unittest diretamente:
python test_questao2_unittest.py
python test_integracao_extras.py

# Executar com relat√≥rio de cobertura:
pip install pytest-cov
pytest --cov=ecommerce --cov-report=html

QUEST√ïES IMPLEMENTADAS:
========================================================================

‚úÖ Quest√£o 1: Testes Pytest para Produto
   - Verifica√ß√£o da cria√ß√£o de produto
   - Verifica√ß√£o da disponibilidade de estoque  
   - Verifica√ß√£o da redu√ß√£o de estoque

‚úÖ Quest√£o 2: Testes unittest para Carrinho
   - Adi√ß√£o de itens no carrinho
   - Remo√ß√£o de itens do carrinho
   - C√°lculo do valor total do carrinho
   - Comportamento com produto sem estoque

‚úÖ Quest√£o 3: Testes para SistemaPagamento  
   - C√°lculo cart√£o de cr√©dito √† vista
   - C√°lculo cart√£o de cr√©dito parcelado
   - C√°lculo pagamento PIX com desconto
   - C√°lculo do valor das parcelas

‚úÖ Quest√£o 4: Testes integra√ß√£o Carrinho-Produto
   - Atualiza√ß√£o valor total ao adicionar produtos
   - Impedimento adi√ß√£o produtos sem estoque
   - Remo√ß√£o parcial de produtos

‚úÖ Quest√£o 5: Testes para Pedido
   - Transi√ß√£o entre estados do pedido
   - Processamento pagamento diferentes m√©todos
   - Restri√ß√µes de transi√ß√£o de estado

‚úÖ Quest√£o 7: Exemplo testes com Mock
   - Simula√ß√£o falha autoriza√ß√£o cart√£o
   - Verifica√ß√£o estado correto ap√≥s falhas

‚úÖ Quest√£o 10: Exemplo testes performance
   - Tempo adi√ß√£o m√∫ltiplos produtos

PRINC√çPIOS APLICADOS:
========================================================================

üîπ Clean Code:
   - Nomes descritivos para classes e m√©todos
   - M√©todos pequenos e com responsabilidade √∫nica
   - Coment√°rios explicativos quando necess√°rio

üîπ SOLID:
   - Single Responsibility: Cada classe tem uma responsabilidade
   - Open/Closed: Classes abertas para extens√£o
   - Dependency Inversion: Uso de abstra√ß√µes (Enums)

üîπ Tratamento de Exce√ß√µes:
   - Exce√ß√µes customizadas (EstoqueInsuficienteError)
   - Valida√ß√µes de neg√≥cio implementadas

üîπ Testes Abrangentes:
   - Testes unit√°rios para cada classe
   - Testes de integra√ß√£o entre componentes
   - Testes de borda e casos de erro
   - Uso de mocks para simula√ß√£o de falhas

EXEMPLO DE USO DO SISTEMA:
========================================================================
"""

# Exemplo pr√°tico de uso do sistema
from ecommerce import *

def exemplo_uso_completo():
    """Demonstra o uso completo do sistema"""
    # 1. Criar sistema
    sistema = SistemaEcommerce()
    
    # 2. Adicionar produtos
    produto1 = Produto(1, "Notebook", "Dell Inspiron", 2500.00, 10, "Eletr√¥nicos")
    produto2 = Produto(2, "Mouse", "Mouse sem fio", 50.00, 20, "Eletr√¥nicos")
    
    sistema.adicionar_produto(produto1)
    sistema.adicionar_produto(produto2)
    
    # 3. Criar carrinho
    carrinho = Carrinho()
    carrinho.adicionar_item(produto1, 1)
    carrinho.adicionar_item(produto2, 2)
    
    print(f"Total do carrinho: R$ {carrinho.calcular_valor_total()}")
    
    # 4. Criar pedido
    id_pedido = sistema.criar_pedido(
        carrinho, 
        MetodoPagamento.PIX, 
        "Rua das Flores, 123"
    )
    
    print(f"Pedido criado: {id_pedido}")
    
    # 5. Consultar pedido
    pedido = sistema.obter_pedido(id_pedido)
    print(f"Status do pedido: {pedido.status.value}")

if __name__ == "__main__":
    exemplo_uso_completo()

"""
OBSERVA√á√ïES IMPORTANTES:
========================================================================

1. O c√≥digo est√° simplificado mas funcional, cobrindo os requisitos b√°sicos
2. Para implementa√ß√£o completa, adicionar:
   - Valida√ß√µes mais robustas
   - Logging
   - Persist√™ncia de dados
   - API REST
   - Interface web

3. Os testes cobrem cen√°rios principais mas podem ser expandidos
4. Implementa√ß√£o segue boas pr√°ticas de desenvolvimento Python

ENTREGA:
========================================================================
- C√≥digo fonte organizado
- Testes funcionais para quest√µes principais  
- Documenta√ß√£o de uso
- Estrutura pronta para apresenta√ß√£o
"""